WHat is List:
---> list is an interface inside the collection framework which have below properties:
1.  Insertion order is maintained. (meaning i have total control on indexes/elements)
2.  I can store duplicate data.

List is implemented by many classes but we will be focusing on ArrayList and linkedList:
ArrayList:
    -when my requirement is that I will be reading the data a lot then I should be going with ArrayList

LinkedList:
    -most of put operations will be writing the data to a list in between or in the shart
    or shifting data we should be going with LinkedList

    !! //never ever use loops, simple for loops, enhanced for loops or while loops if you perform an operation
    !! that can change the size of an array

ITERATOR:
->  is an interface that has three methods hasNext() next() and remove().
-> whenever we try to modify the size of a list using simple loop there are chances that it will
   not work or will throw an error because lists are dynamic and can change the size at runtime
   so to be always on the safe side we should use Iterators.

===================================================================================================

SET:
1. Insertion order is NOT maintained
---> we will be discussing 3 types of sets: HashSet, LinkedHashSet, TreeSet

HashSet:
  Upside: fastest of all;
  Downside: no insertion order is maintained;

LinkedHashSet:
 Upside: insertion order is maintained;
 Downside: retrieval of the elements will be super slow;
           insertion speed slower than HashSet;

TreeSet:
 Upside: elements will always be sorted in natural order(alphabetical);
 Downside:  insertion speed is slowest of all ( because everytime we insert
 it compares with all existing and only then inserts)

========================================================================================================

Map:
-> it is an interface in Java that allow us to store key value pairs
-> we cannot have duplicate keys but we can have duplicate values

We will be discussing 3 of them:
1. HashMap
    Upside: fastest when it comes to insert and retrieve the elements;
    Downside: no insertions order;

2. LinkedHashMap
    Upside: insertion order will be maintained;
    Downside: retrieval will be slowest;

3. TreeMap
    Upside: data will be stored in the sorted form based on key;
    Downside: insertion is the slowest;













