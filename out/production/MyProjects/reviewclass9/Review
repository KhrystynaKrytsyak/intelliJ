OOPS is just a way of writing code a methodology a set of rules that we follow when we write code.
In this methodology we create classes and objects of those classes to represent everything from real life.
We also have:

1. Functional programming
2. Procedural programming
3. Structural programming


        There are 4 Pillars of OOPS:
1. Inheritance
2. Polymorphism
3. Abstraction
4. Encapsulation

Some benefits of OOPS:
1. Code re-usability
2. Cleaner code
3. More flexibility
4. Less code
5. Enforcing rules and hiding the complexity and only focusing on the ideas
6. Secure code

1. INHERITANCE
--->mechanism in java through which a class can acquire the properties
and methods of another class

Why we should use Inheritance?
---> If a piece of code is already present in a class instead or rewriting it or copying it.
--->We can extend our class from tha class, and we will get all the non-private methods and fields that class.
--->It can save a lot of time.
--->Its also good for performance reason.

Downside of Inheritance?
---> we get the unwanted code as well when we inherit from a class
---> the classes are tightly coupled which means if we change something in the parent
class it affects all the child classes.

How can we use inheritance>
---> we use the extends keyword to inherit the classes

class Parent {
String name;
void printName() {

}}
class Child extends Parent {

}
Rules:
1. Inheritance is one way from parent to child only
2. In Java we can't inherit from multiple classes.
3. Final classes cant be inherited. Classes which are declared with final keywords are called final classes.
4. Private members (fields and methods) are not inherited.
5. Constructors are not inherited but we can call them using super() keyword.

Types of inheritance:
1. single inheritance (only 1 parent and 1 child)
2. multilevel inheritance (
3. hierarchical inheritance

SINGLE INHERITANCE
---> only 1 parent and 1 child

MULTILEVEL INHERITANCE
---> when we have a parent and a child class and one or may intermediate classes we call it multilevel inheritance

HIERARCHICAL INHERITANCE
--->when we have a singe Parent and multiple direct child classes it is called Hierarchical

***************************************************************************************************************

 SUPER KEYWORD
 super is a keyword that we use to refer to the parent class fields methods or constructors.

 Why should we use super keyword:
 ---> if we have same name fields inside the parent class and child class we can use the super keyword.
 ---> to distinguish these fields. It's not that common.
 ---> we can use the super() to call the constructors of the parent class as they are not inherited
 ---> if we have same name methods inside the parent and the child class we ca use super keyword to
      call the method from the parent class

**********************************************************************************************************************

METHOD OVERLOADING:
---> whenever same name method exists in a class with different parameters we call it method overloading

WHY WE SHOULD USE METHOD OVERLOADING:
---> it helps us write cleaner and more readable code and also provides the flexibility to have same name
methods in a class.

HOW TO CREATE AN OVERLOADING METHOD:
---> create same method name but make sure this differs in the number of parameters or in types of
parameters or in sequence of parameters

RULES:
1. methods name should be the same but parameters should e different
2. by just changing the return type we can't overload a method
3. we can't overload by just changing the access modifiers(private,default, protected,public)
  && non-access modifiers (final, static, abstract)
4.











